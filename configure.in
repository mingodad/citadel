dnl Process this file with autoconf to produce a configure script.
dnl $Id$
AC_INIT(webserver.c)

AC_CANONICAL_HOST
AC_PROG_INSTALL
AC_PREFIX_DEFAULT(/usr/local/webcit)

AC_ARG_WITH(with_libical, [  --with-libical          use libical calendaring library])
AC_ARG_WITH(with_zlib, [  --with-zlib          use zlib compression if present])
AC_ARG_WITH(with_newt, [  --with-newt          use newt window library])
AC_ARG_WITH(ssl,
	[  --with-ssl=PATH     Specify path to OpenSSL installation ],
	[
		if test "x$withval" != "xno" ; then
			tryssldir=$withval
		fi
	]
)
dnl Set some system-specific variables which are OK to set before compiler
dnl checks:
PTHREAD_DEFS=-D_REENTRANT
case "$host" in
	dnl Tru64 Unix requires we use -pthread instead of linking the threads
	dnl libraries directly, and we can't build threaded programs with gcc
	dnl due to header file problems.
	alpha*-dec-osf*)
		test -z "$CC" && CC=cc
		LIBS=-pthread
	;;
	dnl FreeBSD is similar:
	*-*-freebsd*)
		LIBS=-pthread
		PTHREAD_DEFS=-D_THREAD_SAFE
	;;
	*-*-solaris*)
		PTHREAD_DEFS='-D_REENTRANT -D_PTHREADS'
	;;
esac
AC_SUBST(PTHREAD_DEFS)

dnl Checks for programs.
AC_PROG_CC

dnl Configure compiler flags for GCC
if test "$GCC" = yes; then
	case "$host" in
		*-*-solaris*)
			CFLAGS="$CFLAGS -Wall -Wno-char-subscripts"
		;;
		*)
			CFLAGS="$CFLAGS -Wall"
		;;
	esac
fi

missing_dir=`cd $ac_aux_dir && pwd`
AM_MISSING_PROG(AUTOCONF, autoconf, $missing_dir)

dnl Checks for libraries.
if test "$LIBS" != -pthread; then
	AC_CHECK_LIB(pthread, pthread_create)
	AC_CHECK_LIB(pthreads, pthread_create)
fi
AC_SEARCH_LIBS(gethostbyname, nsl)
AC_SEARCH_LIBS(connect, socket)

dnl Checks for header files.
AC_HEADER_STDC
dnl AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h limits.h sys/time.h unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_OFF_T
AC_TYPE_SIZE_T
dnl AC_HEADER_TIME

dnl Checks for library functions.
AC_TYPE_SIGNAL
dnl AC_FUNC_VPRINTF
dnl AC_CHECK_FUNCS(strerror)
AC_REPLACE_FUNCS(snprintf)

dnl Checks for the libical calendaring library.
if test "x$with_libical" != xno ; then
        AC_CHECK_HEADERS(ical.h,
                [AC_CHECK_LIB(ical, icalcomponent_new,
                        [ok_libical=yes],,
        )])
fi

if test "x$ok_libical" = xyes ; then

	AC_TRY_RUN(
		[
#include <ical.h>
main() {
	float v;
	int i;
	sscanf(ICAL_VERSION, "%f", &v);
	printf("libical version: %0.2f\n", v);
	v = v * 100.0;
	i = (int) v;
	if (i >= 24) {
		printf("This version is ok.\n");
		printf("WebCit will be built with calendar support.\n");
		return(0);
	}
	printf("libical 0.24 or newer is required.\n");
	printf("WebCit will be built without calendar support.\n");
	return(1);
}
		], 
		[
			LIBS="-lical $LIBS"
			AC_DEFINE(HAVE_LIBICAL)
		]
	)
fi



dnl Checks for the zlib compression library.
if test "x$with_zlib" != xno ; then
        AC_CHECK_HEADERS(zlib.h,
                [AC_CHECK_LIB(z, zlibVersion,
                        [ok_zlib=yes],,
        )])
fi

if test "x$ok_zlib" = xyes ; then
        LIBS="-lz $LIBS"
        AC_DEFINE(HAVE_ZLIB)
fi


dnl Checks for the newt window library.
if test "x$with_newt" != xno ; then
	AC_CHECK_HEADERS(newt.h,
		[AC_CHECK_LIB(newt, newtInit,
			[ok_newt=yes],,
	)])
fi

if test "x$ok_newt" = xyes ; then
	SETUP_LIBS="-lnewt $SETUP_LIBS"
	AC_DEFINE(HAVE_NEWT)
fi

# The big search for OpenSSL
if test "$with_ssl" != "no"; then
	saved_LIBS="$LIBS"
	saved_LDFLAGS="$LDFLAGS"
	saved_CFLAGS="$CFLAGS"
	if test "x$prefix" != "xNONE"; then
		tryssldir="$tryssldir $prefix"
	fi
	AC_CACHE_CHECK([for OpenSSL], ac_cv_openssldir, [
		for ssldir in $tryssldir "" /usr /usr/local/openssl /usr/lib/openssl /usr/local/ssl /usr/lib/ssl /usr/local /usr/pkg /opt /opt/openssl ; do
			CFLAGS="$saved_CFLAGS"
			LDFLAGS="$saved_LDFLAGS"
			LIBS="$saved_LIBS -lssl -lcrypto"
	
			# Skip directories if they don't exist
			if test ! -z "$ssldir" -a ! -d "$ssldir" ; then
				continue;
			fi
			if test ! -z "$ssldir" -a "x$ssldir" != "x/usr"; then
				# Try to use $ssldir/lib if it exists, otherwise
				# $ssldir
				if test -d "$ssldir/lib" ; then
					LDFLAGS="-L$ssldir/lib $saved_LDFLAGS"
					if test ! -z "$need_dash_r" ; then
						LDFLAGS="-R$ssldir/lib $LDFLAGS"
					fi
				else
					LDFLAGS="-L$ssldir $saved_LDFLAGS"
					if test ! -z "$need_dash_r" ; then
						LDFLAGS="-R$ssldir $LDFLAGS"
					fi
				fi
				# Try to use $ssldir/include if it exists, otherwise
				# $ssldir
				if test -d "$ssldir/include" ; then
					CFLAGS="-I$ssldir/include $saved_CFLAGS"
				else
					CFLAGS="-I$ssldir $saved_CFLAGS"
				fi
			fi
	
			# Basic test to check for compatible version and correct linking
			# *does not* test for RSA - that comes later.
			AC_TRY_RUN(
				[
	#include <string.h>
	#include <openssl/rand.h>
	int main(void)
	{
		char a[2048];
		memset(a, 0, sizeof(a));
		RAND_add(a, sizeof(a), sizeof(a));
		return(RAND_status() <= 0);
	}
				],
				[
					found_crypto=1
					break;
				], []
			)
	
			if test ! -z "$found_crypto" ; then
				break;
			fi
		done
	
		if test -z "$ssldir" ; then
			ssldir="(system)"
		fi
	
		if test ! -z "$found_crypto" ; then
			ac_cv_openssldir=$ssldir
		else
			ac_cv_openssldir="no"
		fi
	])
	LIBS="$saved_LIBS"
	LDFLAGS="$saved_LDFLAGS"
	CFLAGS="$saved_CFLAGS"
	
	if test "x$ac_cv_openssldir" != "xno" ; then
		AC_DEFINE(HAVE_OPENSSL)
		LIBS="-lssl -lcrypto $LIBS"
		dnl Need to recover ssldir - test above runs in subshell
		ssldir=$ac_cv_openssldir
		if test ! -z "$ssldir" -a "x$ssldir" != "x/usr" -a "x$ssldir" != "x(system)"; then
			# Try to use $ssldir/lib if it exists, otherwise
			# $ssldir
			if test -d "$ssldir/lib" ; then
				LDFLAGS="-L$ssldir/lib $saved_LDFLAGS"
				if test ! -z "$need_dash_r" ; then
					LDFLAGS="-R$ssldir/lib $LDFLAGS"
				fi
			else
				LDFLAGS="-L$ssldir $saved_LDFLAGS"
				if test ! -z "$need_dash_r" ; then
					LDFLAGS="-R$ssldir $LDFLAGS"
				fi
			fi
			# Try to use $ssldir/include if it exists, otherwise
			# $ssldir
			if test -d "$ssldir/include" ; then
				CFLAGS="-I$ssldir/include $saved_CFLAGS"
			else
				CFLAGS="-I$ssldir $saved_CFLAGS"
			fi
		fi
	fi
fi



AC_SUBST(SETUP_LIBS)

AC_OUTPUT(Makefile)

